package org.teleight.teleightbots.codegen.generator.generators;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import org.teleight.teleightbots.codegen.json.TelegramField;

import java.util.List;
import java.util.function.Function;

public sealed interface Generator<T> permits ObjectGenerator, MethodGenerator {

    ClassName API_METHOD_INTERFACE = ClassName.get("org.teleight.teleightbots.api", "ApiMethod");
    ClassName API_RESULT_INTERFACE = ClassName.get("org.teleight.teleightbots.api", "ApiResult");
    ClassName API_RESULT_SERIALIZABLE_INTERFACE = ClassName.get("org.teleight.teleightbots.api", "ApiMethodSerializable");

    ClassName NOT_NULL_ANNOTATION = ClassName.get("org.jetbrains.annotations", "NotNull");

    String METHODS_PACKAGE_NAME = "org.teleight.teleightbots.api.methods";
    String OBJECTS_PACKAGE_NAME = "org.teleight.teleightbots.api.objects";

    JavaFile generate(String name, T t);

    default String toCamelCase(String snakeCase) {
        StringBuilder camelCaseBuilder = new StringBuilder();
        boolean nextCharToUpperCase = false;
        for (char c : snakeCase.toCharArray()) {
            if (c == '_') {
                nextCharToUpperCase = true;
            } else if (nextCharToUpperCase) {
                camelCaseBuilder.append(Character.toUpperCase(c));
                nextCharToUpperCase = false;
            } else {
                camelCaseBuilder.append(c);
            }
        }
        return camelCaseBuilder.toString();
    }

    /**
     * Since we can only add one type of the same field in java records, we should get the most important type.
     * Custom objects are more important than "primitive" ones, so they take precedence
     * If there are no custom objects, then we return a primitive one
     *
     * @param telegramField the telegram field
     * @return the most important type
     */
    default TypeName retrieveMostImportantType(TelegramField telegramField) {
        TypeName mostImportantField = telegramField.types()[0];

        for (TypeName typeName : telegramField.types()) {
            if (typeName instanceof ClassName className) {
                if (className.packageName().equals(OBJECTS_PACKAGE_NAME)) {
                    mostImportantField = typeName;
                    break;
                } else {
                    mostImportantField = typeName;
                }
            }
        }
        return mostImportantField;
    }

//    default TelegramField retrieveTypeToSet(TelegramField telegramField) {
//        TypeName typeToSet = null;
//        String name = "";
//
//        for (TypeName type : telegramField.types()) {
//            if (type instanceof ClassName || type instanceof ArrayTypeName) {
//                ArrayTypeName arrayTypeName = (ArrayTypeName) type;
//
//            }
//
//        }
//        return new TypeToSet(typeToSet, name, typeToSet instanceof ArrayTypeName);
//    }

//    default boolean isTelegramPrimitive(String type) {
//        return type.contains("String")
//                || type.contains("Integer")
//                || type.contains("Long")
//                || type.contains("Float")
//                || type.contains("Double")
//                || type.contains("Boolean");
//    }

    default <O> String listToNiceString(List<O> list, boolean toCamelCase, Function<O, String> nameFunction) {
        StringBuilder sb = new StringBuilder();
        boolean last;
        for (int i = 0; i < list.size(); i++) {
            O item = list.get(i);
            last = i == list.size() - 1;

            String name = toCamelCase ? toCamelCase(nameFunction.apply(item)) : nameFunction.apply(item);
            sb.append(name);

            if (!last) {
                sb.append(", ");
            }
        }
        return sb.toString();
    }

//    private boolean shouldBeLong(TelegramField telegramField, String typeToSet, String name) {
//        if (telegramField.description().contains("32 significant bits") && typeToSet.equals("Integer")) {
//            return true;
//        }
//        return name.equals("chat_id") || name.equals("user_id");
//    }

    default void generateBuilderClass(String className, TelegramField[] fields, TypeSpec.Builder typeSpecBuilder, List<TelegramField> requiredFields, boolean doNotGetCorrectPackage) {
//        if (fields == null) return;
//
//        TypeSpec.Builder builderTypeSpecBuilder = TypeSpec.classBuilder("Builder")
//                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
//                .addJavadoc("AutoGenerated Code. Do not modify!");
//
//        MethodSpec.Builder methodSpecBuilder = MethodSpec.constructorBuilder()
//                .addModifiers(Modifier.PRIVATE);
//        MethodSpec.Builder ofBuilder = MethodSpec.methodBuilder("of")
//                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
//                .returns(ClassName.get("", "Builder"));
//
//        for (TelegramField telegramField : fields) {
//            TypeToSet typeToSet = retrieveTypeToSet(telegramField);
//            TypeName returning = fetchTypeNameForType(sanitizeType(typeToSet.type()), false, typeToSet.isArray(), doNotGetCorrectPackage);
//            FieldSpec.Builder fieldSpecBuilderBuilder = FieldSpec.builder(returning, toCamelCase(telegramField.name()))
//                    .addModifiers(Modifier.PRIVATE);
//            if (telegramField.required()) {
//                fieldSpecBuilderBuilder.addModifiers(Modifier.FINAL);
//            }
//            builderTypeSpecBuilder.addField(fieldSpecBuilderBuilder.build());
//
//            if (requiredFields.contains(telegramField)) {
//                ofBuilder.addParameter(returning, telegramField.name());
//                methodSpecBuilder.addParameter(returning, telegramField.name());
//                methodSpecBuilder.addStatement("this.$N = $N", toCamelCase(telegramField.name()), telegramField.name());
//            } else {
//                MethodSpec.Builder methodSpecOtherStuffBuilder = MethodSpec.methodBuilder(toCamelCase(telegramField.name()))
//                        .addModifiers(Modifier.PUBLIC)
//                        .addAnnotation(NOT_NULL_ANNOTATION)
//                        .returns(ClassName.get("", "Builder"))
//                        .addParameter(ParameterSpec.builder(returning, telegramField.name()).addAnnotation(NOT_NULL_ANNOTATION).build())
//                        .addStatement("this.$N = $N", toCamelCase(telegramField.name()), telegramField.name())
//                        .addStatement("return this");
//                try {
//                    methodSpecOtherStuffBuilder.addJavadoc(telegramField.description());
//                } catch (Exception ignored) {}
//                builderTypeSpecBuilder.addMethod(methodSpecOtherStuffBuilder.build());
//            }
//        }
//
//        String niceString = listToNiceString(Arrays.asList(fields), true, TelegramField::name);
//        builderTypeSpecBuilder.addMethod(MethodSpec.methodBuilder("build")
//                .addModifiers(Modifier.PUBLIC)
//                .returns(ClassName.get("", className))
//                .addStatement("return new $L($L)", className, niceString)
//                .build()
//        );
//
//        String builderNiceString = listToNiceString(requiredFields, false, TelegramField::name);
//        ofBuilder.addStatement("return new Builder($L)", builderNiceString);
//
//        builderTypeSpecBuilder.addMethod(methodSpecBuilder.build());
//        typeSpecBuilder.addType(builderTypeSpecBuilder.build());
//        typeSpecBuilder.addMethod(ofBuilder.build());
    }

//    record TypeToSet(TypeName type, String name, boolean isArray) {}

}
