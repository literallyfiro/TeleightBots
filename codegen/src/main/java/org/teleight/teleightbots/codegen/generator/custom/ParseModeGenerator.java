package org.teleight.teleightbots.codegen.generator.custom;

import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import javax.lang.model.element.Modifier;
import java.io.IOException;

import static org.teleight.teleightbots.codegen.generator.CodeGenerator.autogeneratedPath;
import static org.teleight.teleightbots.codegen.generator.generators.Generator.OBJECTS_PACKAGE_NAME;

public non-sealed class ParseModeGenerator implements CustomGenerator {
    @Override
    public void generate(TypeSpec.Builder classBuilder, String className) {
        TypeSpec spec = TypeSpec.enumBuilder("ParseMode")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addEnumConstant("HTML", TypeSpec.anonymousClassBuilder("$S", "Markdown").build())
                .addEnumConstant("MARKDOWN", TypeSpec.anonymousClassBuilder("$S", "MarkdownV2").build())
                .addEnumConstant("MARKDOWNV2", TypeSpec.anonymousClassBuilder("$S", "html").build())
                .addField(String.class, "fieldValue", Modifier.PRIVATE, Modifier.FINAL)
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(String.class, "fieldValue")
                        .addStatement("this.$N = $N", "fieldValue", "fieldValue")
                        .build())
                .addMethod(MethodSpec.methodBuilder("getFieldValue")
                        .addModifiers(Modifier.PUBLIC)
                        .returns(String.class)
                        .addStatement("return this.$N", "fieldValue")
                        .build())
                .build();

        final JavaFile javaFile = JavaFile.builder(OBJECTS_PACKAGE_NAME, spec)
                .skipJavaLangImports(true)
                .indent("    ")
                .build();
        try {
            javaFile.writeTo(autogeneratedPath);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
