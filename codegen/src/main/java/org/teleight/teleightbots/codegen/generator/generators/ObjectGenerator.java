package org.teleight.teleightbots.codegen.generator.generators;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import org.teleight.teleightbots.codegen.json.TelegramField;
import org.teleight.teleightbots.codegen.json.TelegramObject;

import javax.lang.model.element.Modifier;

public non-sealed class ObjectGenerator implements Generator<TelegramObject> {

    @Override
    public JavaFile generate(String key, TelegramObject telegramObject) {
        if (telegramObject.subtypes() != null && telegramObject.subtypes().length != 0) {
            TypeSpec.Builder typeSpecBuilder = TypeSpec.interfaceBuilder(key)
                    .addModifiers(Modifier.SEALED, Modifier.PUBLIC)
                    .addSuperinterface(API_RESULT_INTERFACE)
                    .addJavadoc("AutoGenerated Code. Do not modify!");
            for (String subtype : telegramObject.subtypes()) {
                typeSpecBuilder.addPermits(ClassName.get(OBJECTS_PACKAGE_NAME, subtype));
            }
            return JavaFile.builder(OBJECTS_PACKAGE_NAME, typeSpecBuilder.build())
                    .skipJavaLangImports(true)
                    .build();
        }

        TypeSpec.Builder typeSpecBuilder = TypeSpec.recordBuilder(key)
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(API_RESULT_INTERFACE)
                .addJavadoc("AutoGenerated Code. Do not modify!");

        if (!(telegramObject.subtype_of() == null)) {
            for (String subtypeOf : telegramObject.subtype_of()) {
                typeSpecBuilder.addSuperinterface(ClassName.get(OBJECTS_PACKAGE_NAME, subtypeOf));
            }
        }

        if (telegramObject.fields() == null) {
            return JavaFile.builder(OBJECTS_PACKAGE_NAME, typeSpecBuilder.build())
                    .skipJavaLangImports(true)
                    .build();
        }

        for (TelegramField field : telegramObject.fields()) {
            TypeToSet typeToSet = retrieveTypeToSet(field);
            ClassName className = ClassName.get(OBJECTS_PACKAGE_NAME, typeToSet.type());
            FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(className, typeToSet.name());
            typeSpecBuilder.addField(fieldSpecBuilder.build());
        }

        return JavaFile.builder(OBJECTS_PACKAGE_NAME, typeSpecBuilder.build())
                .skipJavaLangImports(true)
                .build();
    }

}
