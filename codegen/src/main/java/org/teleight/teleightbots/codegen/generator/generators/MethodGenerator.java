package org.teleight.teleightbots.codegen.generator.generators;

import com.squareup.javapoet.JavaFile;
import org.teleight.teleightbots.codegen.json.TelegramMethod;

public non-sealed class MethodGenerator implements Generator<TelegramMethod> {

    @Override
    public JavaFile generate(String key, TelegramMethod method) {
        // ! todo I need to remake this, it's too messy (but at least it works).
//        String correctedClassName = key.substring(0, 1).toUpperCase() + key.substring(1);
//        TypeSpec.Builder typeSpecBuilder = TypeSpec.recordBuilder(correctedClassName)
//                .addModifiers(Modifier.PUBLIC)
//                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
//                        .addMember("value", "$S", "unused")
//                        .build())
//                .addJavadoc("AutoGenerated Code. Do not modify!");
//
//        // check if method had any subtypes
//        if (!(method.subtype_of() == null)) {
//            for (TypeName subtypeOf : method.subtype_of()) {
//                typeSpecBuilder.addSuperinterface(subtypeOf);
//            }
//        }
//
//        List<TelegramField> requiredFields = populateFields(method, typeSpecBuilder);
//
//        typeSpecBuilder.addMethod(createEndpointMethod(key));
//
//        // !
//        todo add multipart
//        if (method.returns().length == 1) {
//            generateOneReturnMethod(method, typeSpecBuilder);
//        } else {
//            generateMultipleReturnMethod(method, typeSpecBuilder);
//        }
//
//        generateBuilderClass(correctedClassName, method.fields(), typeSpecBuilder, requiredFields, false);
//
//        return JavaFile.builder(METHODS_PACKAGE_NAME, typeSpecBuilder.build())
//                .skipJavaLangImports(true)
//                .build();
        return null;
    }

//    private List<TelegramField> populateFields(TelegramMethod method, TypeSpec.Builder typeSpecBuilder) {
//        if (method.fields() == null) return List.of();
//
//        List<TelegramField> requiredFields = new ArrayList<>();
//        for (TelegramField field : method.fields()) {
//            TypeToSet typeToSet = retrieveTypeToSet(field);
//            TypeName returning = fetchTypeNameForType(typeToSet.type(), false, typeToSet.isArray());
//
//            FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(returning, typeToSet.name());
//            typeSpecBuilder.addField(fieldSpecBuilder.build());
//
//            if (field.required()) {
//                requiredFields.add(field);
//            }
//        }
//        return requiredFields;
//    }
//
//    private MethodSpec createEndpointMethod(String key) {
//        return MethodSpec.methodBuilder("getEndpointURL")
//                .addAnnotation(Override.class)
//                .addAnnotation(NOT_NULL_ANNOTATION)
//                .addModifiers(Modifier.PUBLIC)
//                .addStatement("return $S", key)
//                .returns(String.class)
//                .build();
//    }
//
//    private void generateOneReturnMethod(TypeName type, TypeSpec.Builder typeSpecBuilder) {
//        ParameterizedTypeName parameterizedTypeName = ParameterizedTypeName.get(API_METHOD_INTERFACE, type);
//        typeSpecBuilder.addSuperinterface(parameterizedTypeName);
//
//        typeSpecBuilder.addMethod(MethodSpec.methodBuilder("deserializeResponse")
//                .addAnnotation(Override.class)
//                .addAnnotation(NOT_NULL_ANNOTATION)
//                .addModifiers(Modifier.PUBLIC)
//                .addParameter(ParameterSpec.builder(String.class, "answer").addAnnotation(NOT_NULL_ANNOTATION).build())
//                .addStatement("return deserializeResponse(answer, $L.class)", type)
//                .returns(parameterizedTypeName)
//                .build());
//    }
//
//    private void generateMultipleReturnMethod(TelegramMethod method, TypeSpec.Builder typeSpecBuilder) {
//        typeSpecBuilder.addSuperinterface(API_RESULT_SERIALIZABLE_INTERFACE);
//
//        ClassName serializable = ClassName.get("java.io", "Serializable");
//        ClassName list = ClassName.get("java.util", "List");
//        ClassName arrayList = ClassName.get("java.util", "ArrayList");
//        ClassName classType = ClassName.get(Class.class);
//
//        TypeName serializableWildcard = WildcardTypeName.subtypeOf(serializable);
//        TypeName classParameter = ParameterizedTypeName.get(classType, serializableWildcard);
//        TypeName listParameterizedType = ParameterizedTypeName.get(list, classParameter);
//
//        MethodSpec.Builder methodSpecBuilder = MethodSpec.methodBuilder("getSerializableClasses")
//                .addAnnotation(Override.class)
//                .addAnnotation(NOT_NULL_ANNOTATION)
//                .addModifiers(Modifier.PUBLIC)
//                .addStatement("$T result = new $T<>()", listParameterizedType, arrayList)
//                .returns(listParameterizedType);
//
//        for (TypeName returnClass : method.returns()) {
//            methodSpecBuilder.addStatement("result.add($T.class)", returnClass);
//        }
//
//        methodSpecBuilder.addStatement("return result");
//        typeSpecBuilder.addMethod(methodSpecBuilder.build());
//    }

}
