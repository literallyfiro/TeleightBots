package org.teleight.teleightbots.codegen.generator;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import org.teleight.teleightbots.codegen.json.Method;
import org.teleight.teleightbots.codegen.json.TelegramField;

import javax.lang.model.element.Modifier;
import java.util.List;

public class MethodGenerator implements Generator<Method> {

    private static final ClassName apiResultInterface = ClassName.get("org.teleight.teleightbots.api", "ApiMethod");
    private static final String methodsPackageName = "org.teleight.teleightbots.api.methods";

    @Override
    public JavaFile generate(String key, Method method) {
        TypeSpec.Builder typeSpecBuilder = TypeSpec.recordBuilder(key)
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(apiResultInterface)
                .addJavadoc("AutoGenerated Code. Do not modify!");

        if (!(method.subtype_of() == null)) {
            for (String subtypeOf : method.subtype_of()) {
                typeSpecBuilder.addSuperinterface(ClassName.get(methodsPackageName, subtypeOf));
            }
        }

        if (method.fields() == null) {
            return JavaFile.builder(methodsPackageName, typeSpecBuilder.build())
                    .skipJavaLangImports(true)
                    .build();
        }

        if (method.returns().length == 1) {
            return generateOneReturnMethod(key, method);
        }

        return generateMultipleReturnMethod(key, method);

//        List<TelegramField> requiredFields = new ArrayList<>();
//        for (TelegramField field : method.fields()) {
//            CodeGenerator.TypeToSet typeToSet = CodeGenerator.retrieveTypeToSet(field);
//            ClassName className = ClassName.get(methodsPackageName, typeToSet.type());
//            FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(className, typeToSet.name());
//            typeSpecBuilder.addField(fieldSpecBuilder.build());
//
//            if (field.required()) {
//                requiredFields.add(field);
//            }
//        }
//
//        generateBuilderClass(method, typeSpecBuilder, requiredFields);
//
//
//        return JavaFile.builder(methodsPackageName, typeSpecBuilder.build())
//                .skipJavaLangImports(true)
//                .build();
    }

    private JavaFile generateOneReturnMethod(String key, Method method) {
        return null;
    }

    private JavaFile generateMultipleReturnMethod(String key, Method method) {
        return null;
    }

    private void generateBuilderClass(Method telegramMethod, TypeSpec.Builder typeSpecBuilder, List<TelegramField> requiredFields) {
        TypeSpec.Builder builderTypeSpecBuilder = TypeSpec.classBuilder("Builder")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addJavadoc("AutoGenerated Code. Do not modify!");

        MethodSpec.Builder methodSpecBuilder = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC);
        MethodSpec.Builder ofBuilder = MethodSpec.methodBuilder("of")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(ClassName.get("", "Builder"));

        for (TelegramField telegramField : telegramMethod.fields()) {
            CodeGenerator.TypeToSet typeToSet = CodeGenerator.retrieveTypeToSet(telegramField);
            ClassName className = ClassName.get(methodsPackageName, typeToSet.type());

            FieldSpec.Builder fieldSpecBuilderBuilder = FieldSpec.builder(className, CodeGenerator.toCamelCase(telegramField.name()))
                    .addModifiers(Modifier.PRIVATE);
            builderTypeSpecBuilder.addField(fieldSpecBuilderBuilder.build());

            if (requiredFields.contains(telegramField)) {
                ofBuilder.addParameter(className, telegramField.name());
                methodSpecBuilder.addParameter(className, telegramField.name());
                methodSpecBuilder.addStatement("this.$N = $N", CodeGenerator.toCamelCase(telegramField.name()), telegramField.name());
            } else {
                MethodSpec.Builder methodSpecOtherStuffBuilder = MethodSpec.methodBuilder(telegramField.name())
                        .addModifiers(Modifier.PUBLIC)
                        .returns(ClassName.get("", "Builder"))
                        .addParameter(className, telegramField.name())
                        .addStatement("this.$N = $N", CodeGenerator.toCamelCase(telegramField.name()), telegramField.name())
                        .addStatement("return this");
                builderTypeSpecBuilder.addMethod(methodSpecOtherStuffBuilder.build());
            }
        }

        ofBuilder.addStatement("return new Builder" + "(" + listToNiceString(requiredFields) + ")");

        builderTypeSpecBuilder.addMethod(methodSpecBuilder.build());
        typeSpecBuilder.addType(builderTypeSpecBuilder.build());
        typeSpecBuilder.addMethod(ofBuilder.build());
    }

    private String listToNiceString(List<TelegramField> list) {
        StringBuilder sb = new StringBuilder();
        boolean last;
        for (int i = 0; i < list.size(); i++) {
            TelegramField s = list.get(i);

            last = i == list.size() - 1;

            sb.append(s.name());

            if (!last)
                sb.append(", ");
        }
        return sb.toString();
    }
}
