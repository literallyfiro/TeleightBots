package org.teleight.teleightbots.codegen.generator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeName;
import org.teleight.teleightbots.codegen.generator.generators.Generator;
import org.teleight.teleightbots.codegen.generator.generators.MethodGenerator;
import org.teleight.teleightbots.codegen.generator.generators.ObjectGenerator;
import org.teleight.teleightbots.codegen.json.ApiRoot;
import org.teleight.teleightbots.codegen.json.deserializer.ClassNameDeserializer;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.util.Map;

public class CodeGenerator {

    private final File autogeneratedPath = new File("src/autogenerated/java");

    public void generateApiClasses(Reader reader) {
        final Gson gson = new GsonBuilder().registerTypeAdapter(TypeName[].class, new ClassNameDeserializer()).create();
        final ApiRoot root = gson.fromJson(reader, ApiRoot.class);

        generateClasses(root.types(), new ObjectGenerator());
        generateClasses(root.methods(), new MethodGenerator());
    }

    public <T> void generateClasses(Map<String, T> items, Generator<? super T> generator) {
        try {
            for (Map.Entry<String, T> entry : items.entrySet()) {
                final String name = entry.getKey();
                final T item = entry.getValue();

                final JavaFile javaFile = generator.generate(name, item);
                if (javaFile == null) {
                    throw new GenerationException("Tried to generate " + name + " but a null value was returned");
                }
                javaFile.writeTo(autogeneratedPath);
            }
        } catch (IOException e) {
            throw new GenerationException("Failed to generate classes", e);
        }
    }

}
